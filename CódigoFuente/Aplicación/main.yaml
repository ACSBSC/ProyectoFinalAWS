Resources:
#VPC Generation
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: unique_name_env
#VPC Endpoint

  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource:
              - 'arn:aws:s3:::examplebucket/*'
      RouteTableIds:
        - !Ref PublicRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC

#GateWays
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: unique_name_env

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
#Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub unique_name_env Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub unique_name_env Public Subnet (AZ2)
#Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub unique_name_env Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub unique_name_env Private Subnet (AZ2)
#NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

#  NatGateway1:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt NatGateway1EIP.AllocationId
#      SubnetId: !Ref PublicSubnet1

#  NatGateway2:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt NatGateway2EIP.AllocationId
#      SubnetId: !Ref PublicSubnet2
#Public Routing Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub unique_name_env Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

#Private Routing Tables
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub unique_name_env Private Routes (AZ1)

#  DefaultPrivateRoute1:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable1
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub unique_name_env Private Routes (AZ2)

#  DefaultPrivateRoute2:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable2
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
#EC2 Creation
#  EC2Sub1:
#    Type: 'AWS::Cloud9::EnvironmentEC2'
#    Properties:
#      InstanceType: t2.micro
#      SubnetId: !Ref PrivateSubnet1

#  EC2Sub2:
#    Type: 'AWS::Cloud9::EnvironmentEC2'
#    Properties:
#      InstanceType: t2.micro
#      SubnetId: !Ref PrivateSubnet2   

#Load Balancer
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Listeners:
        - InstancePort: '80'
          LoadBalancerPort: '80'
          Protocol: HTTP
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet1 

#Document DB
#  DocCluster:
#    Type: 'AWS::DocDB::DBCluster'
#    Properties:
#      MasterUsername: "root"
#      MasterUserPassword: "roottoor"
#      StorageEncrypted: false
#    DependsOn:
#      - DocSubnet
#  DocInstance:
#    Type: 'AWS::DocDB::DBInstance'
#    Properties:
#       DBClusterIdentifier: !Ref DocCluster
#       DBInstanceClass: "db.r5.large"
#    DependsOn:
#      - DocCluster
#  DocSubnet:
#    Type: 'AWS::DocDB::DBSubnetGroup'
#    Properties:
#      DBSubnetGroupDescription: DB Subnet Group
#      SubnetIds:
#        - !Ref PrivateSubnet1
#        - !Ref PrivateSubnet2

#S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket 
    Properties: 
      BucketName: routines-velez-itesm-unik-name
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
        RoutingRules: 
        - RoutingRuleCondition:
            HttpErrorCodeReturnedEquals: '404'
            KeyPrefixEquals: app/
          RedirectRule:
            HostName: velezcloud-bucket.us-east-1.amazonaws.com
            ReplaceKeyPrefixWith: report-404/
    #DeletionPolicy: Retain


  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: S3Bucket
                  - /*
            Principal: '*'
            Condition:
              StringLike:
                'aws:Referer':
                  - 'http://www.example.com/*'

#Amazon Cognito
  CognitoIdentity:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      AllowUnauthenticatedIdentities: true

#ACL
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
#ACL Rules
  InboundRule100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NetworkAcl
       RuleNumber: 100
       Protocol: -1
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80
  InboundRule101:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NetworkAcl
       RuleNumber: 101
       Protocol: -1
       RuleAction: allow
       CidrBlock: 10.0.3.0/24
       PortRange:
         From: 22
         To: 22
  InboundRule102:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NetworkAcl
       RuleNumber: 102
       Protocol: -1
       RuleAction: allow
       CidrBlock: 10.0.2.0/24
       PortRange:
         From: 22
         To: 22
  InboundRule103:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NetworkAcl
       RuleNumber: 103
       Protocol: -1
       RuleAction: deny
       CidrBlock: 0.0.0.0/0      
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
#Network Security Group
  SecurityGroupHTTP:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Client To HTTP
        VpcId:
           Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  SecurityGroupHTTPS:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Client To HTTPS
        VpcId:
           Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  SecurityGroupSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Client To SSH
        VpcId:
           Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.2.0/24
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.3.0/24   
  SecurityGroupExit:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Client To Exterior
        VpcId:
           Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0 
#Parcial 2
  LambdaCategories:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaRootRole.Arn
        #arn:aws:iam::514815351447:role/LambdaCloudFormationTest  
        #Edit To Role
        #arn:aws:iam::139319357854:role/service-role/alexa-play-despacito-role-t8fojru6
      Handler: index.handler
      Code:
        #Edit to Bucket
       S3Bucket: cf-templates-l64txxlwc8t6-us-east-1
       S3Key: get-all-categories.zip
      Description: Call for Function Categories
      #VpcConfig: !Ref VPC
  LambdaRandom:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaRootRole.Arn
        #Edit To Role
        #arn:aws:iam::139319357854:role/service-role/alexa-play-despacito-role-t8fojru6
      Handler: index.handler
      Code:
        #Edit to Bucket
       S3Bucket: cf-templates-l64txxlwc8t6-us-east-1
       S3Key: random-rutine-lambda.zip
      Description: Call a Random Activity
      #VpcConfig: !Ref VPC
  LambdaAlexa:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaRootRole.Arn 
        #Edit To Role
        #arn:aws:iam::139319357854:role/service-role/alexa-play-despacito-role-t8fojru6
      Handler: index.handler
      Code:
        #Edit to Bucket
       S3Bucket: cf-templates-l64txxlwc8t6-us-east-1
       S3Key: alexa-skills-code.zip
      Description: Call a Random Activity
      #VpcConfig: !Ref VPC    
#DB Building
  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "categoria_rutinas"
      AttributeDefinitions: 
        - 
          AttributeName: "Id"
          AttributeType: "N"
        - 
          AttributeName: "Tipo"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "Id"
          KeyType: "HASH"
        - 
          AttributeName: "Tipo"
          KeyType: "RANGE"
      ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
  RDS:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: "50"
      Engine: "MariaDB"
      MasterUsername: "root"
      MasterUserPassword: "password"
      DBInstanceClass: "db.t2.small"
      #DBInstanceClass: "db.r5.large"
      DBSecurityGroups:
        - !Ref DBSecurityGroup
#  RDSsubnet:
#    Type: AWS::RDS::DBSubnetGroup
#    Properties:
#      DBSubnetGroupDescription: EC2_Private_Subnet
#      SubnetIds:
#        - !Ref PrivateSubnet1
#        - !Ref PrivateSubnet2
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: All-Security-Group
      DBSecurityGroupIngress:
        - CIDRIP: 0.0.0.0/0
  RandomApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AlexaDespacitoRandom 
  CategoriesApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AlexaDespacitoCategories
  #VPCLink:
  #      Type: AWS::ApiGateway::VpcLink
  #      Properties:
  #          Description: "VPC Link"
  #          Name: "Alexa Despacito"
  #          TargetArns:
  #             - !Ref LoadBalancer

  #IAM Lambda Role
  LambdaRootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref LambdaRootRole
  LambdaErrorsAnomalyDetector:
    Type: AWS::CloudWatch::AnomalyDetector
    Properties:
      MetricName: Errors
      Namespace: AWS/Lambda
      Stat: Sum

  LambdaErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda invocations
      AlarmName: LambdaInvocationsAlarm
      ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
      EvaluationPeriods: 1
      Metrics:
      - Expression: ANOMALY_DETECTION_BAND(e1, 2)
        Id: ad1
      - Id: e1
        MetricStat:
          Metric:
            MetricName: Errors
            Namespace: AWS/Lambda
          Period: !!int 86400
          Stat: Sum
      ThresholdMetricId: ad1
#Outputs:
#  WebsiteURL:
#    Value: !GetAtt [S3Bucket, WebsiteURL]
#    Description: url del sitio en s3
#  S3BucketSecureURL:
#    Value: !Join ['', ['https://', !GetAtt [S3Bucket, DomainName]]]
#    Description: nombre del bucket de s3
